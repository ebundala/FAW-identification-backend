type Form{
  id:   ID!
  title:       String!
  description: String
  state:       State!      
  author:      User!      
  questions:   [Question!]
  grades:      [Grade!]
  responses:   [Response!]
  attachments: [Attachment!]
  createdAt:   String
  updatedAt:   String
}

type FormResult{
    status: Boolean!
    message: String!
    form: Form
}
type FormListResult{
    status: Boolean!
    message: String!
    forms: [Form!]
}
input FormCreateInput{
  title:       String!
  description: String
  state:       State      
 # author:      UserWhereUniqueInput!     
 # questions:   [Question]!
 # grades:      [Grade!]
 # responses:   [Response!]!
 # attachments: [Attachment!]!
}
input FormUpdateDataInput{
  title:       String
  description: String
  state:       State      
}
input FormWhereUniqueInput{
    id:  ID!
}
input FormUpdateInput{
    where: FormWhereUniqueInput
    update: FormUpdateDataInput
}
enum OrderByInput{
  asc
  desc
}
input FormOrderBy{
  title: OrderByInput
  createdAt: OrderByInput
  updatedAt: OrderByInput
}
input FormWhereQuery{
  id: ID
  authorId: ID
  state: State
}
input FormQueryInput{
  take: Int
  skip: Int
  where: FormWhereQuery
  orderBy:FormOrderBy
  cursor: FormWhereUniqueInput
}
extend type Mutation{
    createForm(data:FormCreateInput!):FormResult!
    updateForm(data: FormUpdateInput!):FormResult!
    deleteForm(where:FormWhereUniqueInput!):FormResult!
}

extend type Query{
  forms(where:FormQueryInput):FormListResult!
}