type User {
   id:            ID!          
  email:         String!  
  displayName:   String
  phoneNumber:   String
  emailVerified: Boolean!    
  disabled:      Boolean!   
  avator:        File
  role:          Role!     
  forms:         [Form!]!
  responses:     [Response!]!
  createdAt:     String!  
  updatedAt:     String!   
 
}
input AuthInput{
    email: String!
    password: String!
    displayName: String
}
type AuthResult{
    token: String
    error: Boolean!
    message: String!
    user: User 
}
type SignOutResult{
 status: Boolean
 message: String

}
input UserWhereUniqueInput {
  id: Int
  email: String
  uid: String
}






extend type Query{
    me:User
}
extend type Mutation{
    signup(credentials: AuthInput):AuthResult!
    signin(credentials: AuthInput):AuthResult!
    signout:SignOutResult!
}
