type Recommendation{
   id: ID!
  content:     String!
  attachments(where: AttachmentQueryInput): [Attachment!]
  grade:       Grade!
  createdAt:   String
  updatedAt:   String
}


input RecommendationCreateInput{  
  content:     String!
  grade:       GradeWhereUniqueInput!
  attachments: [AttachmentWhereUniqueInput!]!

}
input RecommendationUpdateDataInput{    
  content:     String    
  grade:       GradeWhereUniqueInput
  attachments: [AttachmentWhereUniqueInput!] 
  disconnected: [AttachmentWhereUniqueInput!]
}
input RecommendationWhereUniqueInput{
    id: ID!
}
input RecommendationUpdateInput{
    where:RecommendationWhereUniqueInput
    update: RecommendationUpdateDataInput
}
type RecommendationResult{
    status: Boolean!
    message: String!
    recommendation: Recommendation
}
type RecommendationListResult{
    status: Boolean!
    message: String!
    recommendations: [Recommendation!]
}
input RecommendationOrderBy{
    id: OrderByInput
    content: OrderByInput      
    createdAt: OrderByInput
    updatedAt: OrderByInput
}
input RecommendationWhereQuery{
  id: ID
  content:     String
  grade:       GradeWhereUniqueInput!

}
input RecommendationQueryInput{
  take: Int
  skip: Int
  where: RecommendationWhereQuery
  orderBy: RecommendationOrderBy
  cursor: RecommendationWhereUniqueInput   
}
extend type Mutation{
    createRecommendation(data:RecommendationCreateInput!): RecommendationResult!
    updateRecommendation(data:RecommendationUpdateInput!): RecommendationResult!
    deleteRecommendation(where:RecommendationWhereUniqueInput!):RecommendationResult!
}