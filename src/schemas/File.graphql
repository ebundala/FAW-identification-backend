scalar Upload
type File{
    id: ID!
    path:             String!
    filename:         String!
    mimetype:         String!
    encoding:         String!
}

input FileUpdateDataInput{    
    path:             String
    filename:         String
    mimetype:         String
    encoding:         String     
}
input FileWhereUniqueInput{
    id: ID!
}
input FileUpdateInput{
    where:FileWhereUniqueInput
    update: FileUpdateDataInput
}
type FileResult{
    status: Boolean!
    message: String!
    file: File
}
type FileListResult{
    status: Boolean!
    message: String!
    files: [File!]
}
input FileOrderBy{
    id: OrderByInput   
    path:             OrderByInput
    filename:         OrderByInput
    mimetype:         OrderByInput
    encoding:         OrderByInput
}
input FileWhereQuery{
  id: ID
  path:             String
  filename:         String
  mimetype:         String
  encoding:         String
}
input FileQueryInput{
 take: Int
  skip: Int
  where: FileWhereQuery
  orderBy:FileOrderBy
  cursor: FileWhereUniqueInput   
}
extend type Mutation{
    createFile(data: Upload!): FileResult!
    updateFile(data: FileUpdateInput!): FileResult!
    deleteFile(where: FileWhereUniqueInput!):FileResult!
}
