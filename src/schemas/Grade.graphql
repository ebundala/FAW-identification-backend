type Grade {
	id:              ID!
	name:           String!
	description:      String
	form:             Form!           
	responses(where: ResponseQueryInput):        [Response!]
	recommendations(where: RecommendationQueryInput):  [Recommendation!]
	questions(where: QuestionQueryInput):       [Question!]
	minValue:              Float!
	maxValue:              Float!
	minInclusive:     Boolean         
	maxInclusive:     Boolean         
	attachments(where: AttachmentQueryInput):      [Attachment!]
	createdAt:        String!
	updatedAt:        String!
}
input GradeCreateInput {
	name:           String!
	description:      String
	minValue:              Float!
	maxValue:              Float!
	minInclusive:     Boolean         
	maxInclusive:     Boolean         
	form:             FormWhereUniqueInput!
}
input GradeUpdateDataInput {
	name:           String
	description:      String
	minValue:              Float
	maxValue:              Float
	minInclusive:     Boolean         
	maxInclusive:     Boolean         
}
input GradeWhereUniqueInput {
	id: ID!
}
input GradeUpdateInput {
	where: GradeWhereUniqueInput
	update: GradeUpdateDataInput
}
type GradeResult {
	status: Boolean!
	message: String!
	grade: Grade
}
type GradeListResult {
	status: Boolean!
	message: String!
	grades: [Grade!]
}
input GradeOrderBy {
	name:           OrderByInput
	description:      OrderByInput
	minValue:              OrderByInput
	maxValue:              OrderByInput
	minInclusive:     OrderByInput         
	maxInclusive:     OrderByInput         
	id: OrderByInput
	createdAt: OrderByInput
	updatedAt: OrderByInput
}
input GradeWhereQuery {
	id:               ID
	name:             String
	description:      String
	minValue:              Float
	maxValue:              Float
	minInclusive:     Boolean         
	maxInclusive:     Boolean

}
input GradeQueryInput {
	take: Int
	skip: Int
	where: GradeWhereQuery
	orderBy: GradeOrderBy
	cursor: GradeWhereUniqueInput   
}
extend type Mutation {
	createGrade(data: GradeCreateInput!): GradeResult!
	updateGrade(data: GradeUpdateInput!): GradeResult!
	deleteGrade(where: GradeWhereUniqueInput!): GradeResult!
}