
type Question{
  id: ID!
  questionNumber: Int!
  question:       String!
  weight:         Float
  instruction:    String
  questionType:   QuestionType!
  form:           Form!  
  grade:          Grade!      
  answers(where: AnswerQueryInput):        [Answer!]
  attachments(where: AttachmentQueryInput):    [Attachment!]
  createdAt:      String
  updatedAt:      String
}
enum QuestionType {
  BOOLEAN
  TEXT
}

input QuestionCreateInput{
    questionNumber: Int!
    question: String
    weight: Float!
    instruction: String
    questionType: QuestionType!
    form: FormWhereUniqueInput!
    grade: GradeWhereUniqueInput!
    attachments: [AttachmentWhereUniqueInput!]! 
}
input QuestionUpdateDataInput{
    questionNumber: Int
    question: String
    weight: Float
    instruction: String
    questionType: QuestionType
    grade: GradeWhereUniqueInput
    attachments: [AttachmentWhereUniqueInput!] 
}
input QuestionWhereUniqueInput{
    id: ID!
}
input QuestionUpdateInput{
    where:QuestionWhereUniqueInput
    update: QuestionUpdateDataInput
}
type QuestionResult{
    status: Boolean!
    message: String!
    question: Question
}
type QuestionListResult{
    status: Boolean!
    message: String!
    questions:[Question!]
}
input QuestionOrderBy{
    questionNumber: OrderByInput
    weight: OrderByInput
    question: OrderByInput
    instruction: OrderByInput
    questionType: OrderByInput
    id: OrderByInput
    createdAt: OrderByInput
    updatedAt: OrderByInput
}
input QuestionWhereQuery{
    id: ID
    questionNumber: Int
    question: String
    instruction: String
    weight: Float
    questionType: QuestionType
    grade: GradeWhereUniqueInput
}
input QuestionQueryInput{
  take: Int
  skip: Int
  where: QuestionWhereQuery
  orderBy:QuestionOrderBy
  cursor: QuestionWhereUniqueInput   
}

extend type Mutation{
    createQuestion(data:QuestionCreateInput!): QuestionResult!
    updateQuestion(data:QuestionUpdateInput!): QuestionResult!
    deleteQuestion(where:QuestionWhereUniqueInput!):QuestionResult!
}

