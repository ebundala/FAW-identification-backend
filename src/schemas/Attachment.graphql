scalar Upload
type Attachment{
    id: ID!
    path:             String!
    filename:         String!
    mimetype:         String!
    encoding:         String!
    createdAt:        String!
    updatedAt:        String!
}

input AttachmentUpdateDataInput{    
    path:             String
    filename:         String
    mimetype:         String
    encoding:         String     
}
input AttachmentWhereUniqueInput{
    id: ID!
}
input AttachmentUpdateInput{
    where:AttachmentWhereUniqueInput
    update: AttachmentUpdateDataInput
}
type AttachmentResult{
    status: Boolean!
    message: String!
    file: Attachment
}
type AttachmentListResult{
    status: Boolean!
    message: String!
    files: [Attachment!]
}
input AttachmentOrderBy{
    id: OrderByInput   
    path:             OrderByInput
    filename:         OrderByInput
    mimetype:         OrderByInput
    encoding:         OrderByInput
    createdAt:        OrderByInput
    updatedAt:        OrderByInput
}
input AttachmentWhereQuery{
  id: ID
  path:             String
  filename:         String
  mimetype:         String
  encoding:         String
}
input AttachmentQueryInput{
 take: Int
  skip: Int
  where: AttachmentWhereQuery
  orderBy: AttachmentOrderBy
  cursor: AttachmentWhereUniqueInput   
}
extend type Mutation{
    createAttachment(data: Upload!): AttachmentResult!
    updateAttachment(data: AttachmentUpdateInput!): AttachmentResult!
    deleteAttachment(where: AttachmentWhereUniqueInput!):AttachmentResult!
}
