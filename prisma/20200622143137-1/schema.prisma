// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int        @default(autoincrement()) @id
  uid           String     @unique
  email         String     @unique
  displayName   String
  phoneNumber   String?
  emailVerified Boolean    @default(false)
  disabled      Boolean    @default(true)
  avator        File?      @relation(fields: [avatorId], references: [id])
  avatorId      Int?
  role          Role       @default(USER)
  forms         Form[]
  responses     Response[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model File {
  id               Int             @default(autoincrement()) @id
  path             String
  filename         String?
  mimetype         String?
  encoding         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  User             User[]
  Form             Form?           @relation(fields: [formId], references: [id])
  formId           Int?
  Grade            Grade?          @relation(fields: [gradeId], references: [id])
  gradeId          Int?
  Response         Response?       @relation(fields: [responseId], references: [id])
  responseId       Int?
  Question         Question?       @relation(fields: [questionId], references: [id])
  questionId       Int?
  Answer           Answer?         @relation(fields: [answerId], references: [id])
  answerId         Int?
  Recommendation   Recommendation? @relation(fields: [recommendationId], references: [id])
  recommendationId Int?
}

model Form {
  id          Int        @default(autoincrement()) @id
  title       String
  description String?
  state       State      @default(PENDING)
  author      User       @relation(fields: [authorId], references: [uid])
  authorId    String
  questions   Question[]
  grades      Grade[]
  responses   Response[]
  attachments File[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Grade {
  id              Int              @default(autoincrement()) @id
  name            String
  description     String
  form            Form             @relation(fields: [formId], references: [id])
  formId          Int
  responses       Response[]
  recommendations Recommendation[]
  min             Float
  max             Float
  minInclusive    Boolean          @default(false)
  maxInclusive    Boolean          @default(false)
  attachments     File[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Response {
  id          Int      @default(autoincrement()) @id
  author      User     @relation(fields: [authorId], references: [uid])
  authorId    String
  form        Form     @relation(fields: [formId], references: [id])
  formId      Int
  answers     Answer[]
  grade       Grade?   @relation(fields: [gradeId], references: [id])
  gradeId     Int?
  attachments File[]
  state       State    @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id             Int          @default(autoincrement()) @id
  questionNumber Int
  question       String
  weight         Float        @default(0.0)
  instruction    String?
  questionType   QuestionType @default(BOOLEAN)
  form           Form         @relation(fields: [formId], references: [id])
  formId         Int
  answers        Answer[]
  attachments    File[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Answer {
  id           Int      @default(autoincrement()) @id
  response     Response @relation(fields: [responseId], references: [id])
  responseId   Int
  question     Question @relation(fields: [questionId], references: [id])
  questionId   Int
  attachments  File[]
  booleanValue Boolean?
  textValue    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Recommendation {
  id          Int      @default(autoincrement()) @id
  content     String
  attachments File[]
  grade       Grade    @relation(fields: [gradeId], references: [id])
  gradeId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// use boolean and text question first for POC
enum QuestionType {
  BOOLEAN
  TEXT
}

enum Role {
  USER
  ADMIN
  MODERATOR
  ORGANIZATION
}

enum State {
  PENDING
  REVIEW
  REJECTED
  APPROVED
  COMPLETED
  ARCHIVED
}